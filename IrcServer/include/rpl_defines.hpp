#ifndef __RPL_DEFINES_H__
#define __RPL_DEFINES_H__

#define RPL_001_WELCOME					":" + Server::ip + " 001 " + client.getNickname() + " :Welcome to the Network, " + client.getNickname() + "\r\n"
#define RPL_002_YOURHOST 				":" + Server::ip + " 002 " + client.getNickname() + " :Your host is " + Server::ip + ", running version ftirc\r\n"
#define RPL_003_CREATED					":" + Server::ip + " 003 " + client.getNickname() + " :This server was created 29/04/2023\r\n"
#define RPL_004_MYINFO					":" + Server::ip + " 004 " + client.getNickname() + " " + Server::ip + " ftirc itkol kol\r\n"
#define RPL_005_ISUPPORT				":" + Server::ip + " 005 " + client.getNickname() + " CHANMODES=,k,l,it CHANTYPES=# CHARSET=ascii PREFIX=(o)@ :are supported by this server\r\n"
#define RPL_303_TOPICWHOTIME			":" + Server::ip + " 303 " + client.getNickname() + " :" + names + "\r\n"
#define RPL_315_ENDOFWHO				":" + Server::ip + " 315 " + client.getNickname() + " " + channelName + " :End of /WHO list." + "\r\n"
#define RPL_324_CHANNELMODE				":" + Server::ip + " 324 " + channelName + " :" + channel_ptr->getMode() + "\r\n"
#define RPL_329_CREATIONTIME			":" + Server::ip + " 329 " + client.getNickname() + " " + channelName + " " + channel_ptr->getDate() + "\r\n"
#define RPL_331_NOTOPIC					":" + Server::ip + " 331 " + client.getNickname() + " " + channelName + " :No topic is set\r\n"
#define RPL_332_TOPIC					":" + Server::ip + " 332 " + client.getNickname() + " " + channelName + " :" + channel->getTopic() + "\r\n"
#define RPL_341_INVITING				":" + Server::ip + " 341 " + client.getNickname() + " " + nick + " " + channelName + "\r\n"
#define RPL_352_WHOREPLY				":" + Server::ip + " 352 " + client.getNickname() + " " + channelName + " " + clientList[i]->getNickname() + " " + Server::ip + " " + Server::ip + " " + clientList[i]->getNickname() + " H" + (channel->isOp(*clientList[i]) ? "@" : "") + " :0 " + clientList[i]->getRealname() + "\r\n"
#define RPL_353_NAMREPLY				":" + Server::ip + " 353 " + client.getNickname() + " = " + channelName + " :" + channel->getUsersInChannel() + "\r\n"
#define RPL_366_ENDOFNAMES				":" + Server::ip + " 366 " + client.getNickname() + " " + channelName + " :End of /NAMES list\r\n"
#define RPL_368_ENDOFBANLIST			":" + Server::ip + " 368 " + client.getNickname() + " " + channelName + " :End of channel ban list\r\n"

#define ERR_401_NOSUCHNICK				":" + Server::ip + " 401 " + client.getNickname() + " " + nick + " :No such nick.\r\n"
#define ERR_403_NOSUCHCHANNEL			":" + Server::ip + " 403 " + client.getNickname() + " " + channelName + " :No such channel.\r\n"
#define ERR_405_TOMANYCHAN				":" + Server::ip + " 405 " + client.getNickname() + " " + channelName + " :Can't add more channel.\r\n"
#define ERR_421_UNKNOWNCOMMAND			":" + Server::ip + " 421 " + client.getNickname() + " " + first_arg + " :Unknown command\r\n"
#define ERR_432_ERRONEUSNICKNAME		":" + Server::ip + " 432 " + client.getNickname() + " :Invalid nickname!\r\n"
#define ERR_433_NICKNAMEINUSE 			":" + Server::ip + " 433 " + client.getNickname() + " :Nickname is already in use.\r\n"
#define ERR_441_USERNOTINCHANNEL		":" + Server::ip + " 441 " + client.getNickname() + " " + nick + " " + channelName + " :" + reason + "\r\n"
#define ERR_442_NOTONCHANNEL			":" + Server::ip + " 442 " + client.getNickname() + " " + channelName + " :You're not on that channel!\r\n"
#define ERR_443_USERONCHANNEL			":" + Server::ip + " 443 " + client.getNickname() + " " + nick + " " + channelName + " :User already in channel\r\n"
#define ERR_461_NEEDMOREPARAMS			":" + Server::ip + " 461 " + client.getNickname() + " :Not enough parameters\r\n"
#define ERR_462_ALREADYREGISTERED		":" + Server::ip + " 462 " + client.getNickname() + " :You may not reregister\r\n"
#define ERR_464_PASSWDMISMATCH			":" + Server::ip + " 464 " + client.getNickname() + " :Password incorrect\r\n"
#define ERR_471_CHANNELISFULL			":" + Server::ip + " 471 " + client.getNickname() + " " + channelName + " :Cannot join channel (channel is full)\r\n"
#define ERR_472_UNKNOWNCHAR				":" + Server::ip + " 472 " + client.getNickname() + " " + *it + " :is unknown mode char to me\r\n"
#define ERR_473_INVITEONLYCHAN			":" + Server::ip + " 473 " + client.getNickname() + " " + channelName + " :Channel is invite only!\r\n"
#define ERR_475_BADCHANNELKEY			":" + Server::ip + " 475 " + client.getNickname() + " " + channelName + " :Cannot join channel (wrong channel key)\r\n"
#define ERR_482_CHANOPRIVSNEEDED		":" + Server::ip + " 482 " + client.getNickname() + " " + channelName + " :You need operator privilege for this action!\r\n"
#define ERR_519_TOOMANYUSERS			":" + Server::ip + " 519 " + client->getNickname() + " " + nick + ":Can't add more client.\r\n"
#define ERR_696_INVALIDMODEPARAM_KEY	":" + Server::ip + " 696 " + client.getNickname() + " " + channelName + " " + *it + " * :You must specify a parameter for the key mode. Syntax: <key>.\r\n"
#define ERR_696_INVALIDMODEPARAM_OP		":" + Server::ip + " 696 " + client.getNickname() + " " + channelName + " " + *it + " * :You must specify a parameter for the operator mode. Syntax: <op>.\r\n"
#define ERR_696_INVALIDMODEPARAM_UL		":" + Server::ip + " 696 " + client.getNickname() + " " + channelName + " " + *it + " * :You must specify a parameter for the operator mode. Syntax: <len>.\r\n"

#define LOG_CHANNELJOINED				":" + client.getID() + " JOIN " + channel->getName() + "\r\n"
#define LOG_CHANNELPARTED				":" + client.getID() + " PART " + channel->getName() + "\r\n"
#define LOG_PRIVMSG						":" + client.getID() + " PRIVMSG " + target + " :" + sendMsg + "\r\n"
#define LOG_PONGANSWER					":" + Server::ip + " PONG " + Server::ip + " " + getArg(msg, 1) + "\r\n"
#define LOG_TOPICCHANGED				":" + client.getID() + " TOPIC " + channelName + " :" + topic + "\r\n"
#define LOG_USERQUIT					":" + client.getID() + " QUIT : Quit\r\n"
#define LOG_USERKICKED					":" + client.getID() + " KICK " + channel->getName() + " " + nick + " :" + reason + "\r\n"
#define LOG_USERINVITE					":" + client.getID() + " INVITE " + nick + " " + channelName + "\r\n"
#define LOG_NICKNAMECHANGE				":" + client.getID() + " NICK :" + newNick + "\r\n"

#endif // __RPL_DEFINES_H__
